[
  {
    "objectID": "HW6.html",
    "href": "HW6.html",
    "title": "HW6",
    "section": "",
    "text": "The lapply() function is used to apply functions to a list. Specifically, it takes the function you want to apply and applies it to each element inside the list, then it returns the results back as a list. The purrr equivalent is map(), but it is slightly different in similar vein to how tibbles are different than BaseR data frames.\n\n\n\ncor_summary &lt;- function(my_list) {\n  lapply(my_list, function(x) cor(x, method = \"kendall\"))\n}\n\n\nThe advantage to using map() is that the ‘helpers’ are more concise than their lapply() counterparts, and provides convenient map() variants like map2() which allows you to map over x and y simultaneously. One disadvantage to using map() is that it is slightly slower than lapply().\nA side-effect function is a function that does not directly mainpulate the data, such as print() or plot(). Instead the function produces something based off the data provided, for example the plot() function is used to produce plots/graphs of the data supplied to it and does not change anything about the data provided.\nIt does not cause any issues because R uses two types of scoping: lexical scoping and dynamic scoping. In this case lexical scoping is being used by R, which means that R looks up the symbol values based on how the function was orginally nested when created not when it is being called. When your calling ‘sd’ in your function it is refering to the object in the current environment not the global one. Functions act as an environment of their own, that is why if you were to make a vector, such as x &lt;- 10 inside the function when you try to print x outside the function you will get an error message telling you the object was not found."
  },
  {
    "objectID": "HW6.html#task-1-conceptual-questions",
    "href": "HW6.html#task-1-conceptual-questions",
    "title": "HW6",
    "section": "",
    "text": "The lapply() function is used to apply functions to a list. Specifically, it takes the function you want to apply and applies it to each element inside the list, then it returns the results back as a list. The purrr equivalent is map(), but it is slightly different in similar vein to how tibbles are different than BaseR data frames.\n\n\n\ncor_summary &lt;- function(my_list) {\n  lapply(my_list, function(x) cor(x, method = \"kendall\"))\n}\n\n\nThe advantage to using map() is that the ‘helpers’ are more concise than their lapply() counterparts, and provides convenient map() variants like map2() which allows you to map over x and y simultaneously. One disadvantage to using map() is that it is slightly slower than lapply().\nA side-effect function is a function that does not directly mainpulate the data, such as print() or plot(). Instead the function produces something based off the data provided, for example the plot() function is used to produce plots/graphs of the data supplied to it and does not change anything about the data provided.\nIt does not cause any issues because R uses two types of scoping: lexical scoping and dynamic scoping. In this case lexical scoping is being used by R, which means that R looks up the symbol values based on how the function was orginally nested when created not when it is being called. When your calling ‘sd’ in your function it is refering to the object in the current environment not the global one. Functions act as an environment of their own, that is why if you were to make a vector, such as x &lt;- 10 inside the function when you try to print x outside the function you will get an error message telling you the object was not found."
  },
  {
    "objectID": "HW6.html#task-2-writing-r-functions",
    "href": "HW6.html#task-2-writing-r-functions",
    "title": "HW6",
    "section": "Task 2: Writing R Functions",
    "text": "Task 2: Writing R Functions\n\n\n\n\n#Creating function to get RMSE\ngetRMSE &lt;- function(resp, pred, ...){\n  square &lt;- (resp - pred)^2 \n  mean &lt;- mean(square, ...)\n  return(sqrt(mean))\n}\n\n\n\n\n\n#Creating data to test\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n#Testing without additional argument\ngetRMSE(resp, pred)\n\n[1] 0.9581677\n\n#turning response values to NA\nresp[1:2] &lt;- NA_real_\n#testing function with NA argument\ngetRMSE(resp, pred, na.rm = TRUE)\n\n[1] 0.9661699\n\n\n\n\n\n\n#Creating function to get mean absolute error\ngetMAE &lt;- function(resp, pred, ...){\n  abs_val &lt;- abs(resp - pred)\n  mean(abs_val, ...)\n}\n\n\n\n\n\n#Rerunning code to create sample dataset \nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n#Testing function\ngetMAE(resp, pred)\n\n[1] 0.8155776\n\n#turning response values to NA\nresp[1:2] &lt;- NA_real_\n#testing function with NA argument\ngetMAE(resp, pred, na.rm = TRUE)\n\n[1] 0.8241201\n\n\n\n\n\n\n#Creating wrapper function that can call both getRMSE() and getMAE()\nwrapper &lt;- function(resp, pred, getRMSE = \"TRUE\", getMAE = \"TRUE\", ...){\n  num_vars &lt;- c(resp, pred)\n  if(!is.numeric(num_vars) || !is.atomic(num_vars) || !is.vector(num_vars) ){\n    stop(\"response & prediction must be a numeric (atomic) vector\")\n  }\n  if(getRMSE){\n    RMSE &lt;- getRMSE(resp, pred, ...)\n    cat(\"RMSE\", RMSE, \" \")\n  }\n  if(getMAE){\n    MAE &lt;- getMAE(resp, pred, ...)\n    cat(\"MAE\", MAE)\n  }\n}\n#Recreating data\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n#Running wrapper for getRMSE only\nwrapper(resp, pred, getMAE = FALSE)\n\nRMSE 0.9581677  \n\n#Running wrapper for getMAE only\nwrapper(resp, pred, getRMSE = FALSE)\n\nMAE 0.8155776\n\n#creating null observations\nresp[1:2] &lt;- NA_real_\n#running wrapper with null observations\nwrapper(resp, pred, na.rm = TRUE)\n\nRMSE 0.9661699  MAE 0.8241201\n\n#Running incorrect data type through wrapper\ndf &lt;- iris #loading in iris dataset\nwrapper(iris, pred)\n\nError in wrapper(iris, pred): response & prediction must be a numeric (atomic) vector"
  },
  {
    "objectID": "HW6.html#task-3-querying-an-api-and-a-tidy-style-function",
    "href": "HW6.html#task-3-querying-an-api-and-a-tidy-style-function",
    "title": "HW6",
    "section": "Task 3: Querying an API and a Tidy-Style Function",
    "text": "Task 3: Querying an API and a Tidy-Style Function\n\n\n\n\n#Loading in httr, jsonlite, and purrr package\nlibrary(httr)\nlibrary(purrr)\nlibrary(jsonlite)\nlibrary(tidyverse)\nlibrary(lubridate)\n\n\n#Using GET() to query info on NDAs\nNDA_temp &lt;- GET(\"https://newsapi.org/v2/everything?q=NDAs&from=2024-09-17&apiKey=bed510d4bd934eb19f33549204a85dba\")\n\n\n\n\n\n#Parsing the data and using pluck to grab articles\nNDA_art  &lt;- NDA_temp$content |&gt; \n  rawToChar() |&gt; \n  fromJSON() |&gt;\n  pluck(\"articles\")\n\n#Checking if first column is a list column\nNDA_art[, 1]\n\n                   id                                               name\n1                &lt;NA&gt;                                        Gizmodo.com\n2                &lt;NA&gt;                                           BBC News\n3    business-insider                                   Business Insider\n4                &lt;NA&gt;                                      Rolling Stone\n5     bleacher-report                                    Bleacher Report\n6                &lt;NA&gt;                                       AppleInsider\n7                &lt;NA&gt;                                           GameSpot\n8                &lt;NA&gt;                                          Stereogum\n9                &lt;NA&gt;                                      Longreads.com\n10               &lt;NA&gt;                                             Forbes\n11               &lt;NA&gt;                                              /FILM\n12               &lt;NA&gt;                                          Stereogum\n13               &lt;NA&gt;                                      Rolling Stone\n14               &lt;NA&gt;                                          Dnyuz.com\n15               &lt;NA&gt;                                             Forbes\n16               &lt;NA&gt;                                  Tom's Hardware UK\n17               &lt;NA&gt;                                             Forbes\n18               &lt;NA&gt;                                       ComputerBase\n19               &lt;NA&gt;                                             Forbes\n20               &lt;NA&gt;                                         The Hustle\n21               &lt;NA&gt;                                         CBS Sports\n22               &lt;NA&gt;                                      Boston Herald\n23               &lt;NA&gt;                                          [Removed]\n24               &lt;NA&gt;                                          [Removed]\n25               &lt;NA&gt;                                            Sky.com\n26               &lt;NA&gt;                                         CBS Sports\n27               &lt;NA&gt;                                     Boredpanda.com\n28               &lt;NA&gt;                                 Crooksandliars.com\n29               &lt;NA&gt;                                             Forbes\n30               &lt;NA&gt;                                             Forbes\n31               espn                                               ESPN\n32               &lt;NA&gt;                                Nakedcapitalism.com\n33               &lt;NA&gt;                                           BroBible\n34            fortune                                            Fortune\n35               &lt;NA&gt;                                         GeekTyrant\n36               &lt;NA&gt;                                     Independent.ie\n37               &lt;NA&gt;                                     Techrights.org\n38               &lt;NA&gt;                                      ComicBook.com\n39               &lt;NA&gt;                                   iPhone in Canada\n40               &lt;NA&gt;                                        Daily Beast\n41               &lt;NA&gt;                                             Newser\n42               &lt;NA&gt;                                        CinemaBlend\n43        abc-news-au                                      ABC News (AU)\n44               &lt;NA&gt;                                          TweakTown\n45               &lt;NA&gt;                                         Music Ally\n46               &lt;NA&gt;                                      GlobeNewswire\n47               &lt;NA&gt;                                         Pajiba.com\n48               &lt;NA&gt;                                            Sky.com\n49           abc-news                                           ABC News\n50               &lt;NA&gt;                                            newsBTC\n51           newsweek                                           Newsweek\n52               &lt;NA&gt;                                Americanthinker.com\n53               &lt;NA&gt;                                        Screen Rant\n54           abc-news                                           ABC News\n55               &lt;NA&gt;                                            TheWrap\n56     financial-post                                     Financial Post\n57           cbc-news                                           CBC News\n58           abc-news                                           ABC News\n59           cbc-news                                           CBC News\n60               &lt;NA&gt;                                       The Diplomat\n61               &lt;NA&gt;                                           Fark.com\n62               &lt;NA&gt;                                   Dianeravitch.net\n63               &lt;NA&gt;                                      The Daily Dot\n64               &lt;NA&gt;                                      GlobeNewswire\n65               &lt;NA&gt;                                      GlobeNewswire\n66               &lt;NA&gt;                                      GlobeNewswire\n67               &lt;NA&gt;                                      GlobeNewswire\n68               &lt;NA&gt;                                           Mediaite\n69    the-irish-times                                    The Irish Times\n70               &lt;NA&gt; Harvard School of Engineering and Applied Sciences\n71               &lt;NA&gt;                                         Music Ally\n72               &lt;NA&gt;                                           Page Six\n73  new-york-magazine                                  New York Magazine\n74               &lt;NA&gt;                                      GlobeNewswire\n75               &lt;NA&gt;                                        CryptoSlate\n76               &lt;NA&gt;                                      GlobeNewswire\n77               &lt;NA&gt;                                      GlobeNewswire\n78               &lt;NA&gt;                                      GlobeNewswire\n79               &lt;NA&gt;                                      GlobeNewswire\n80               &lt;NA&gt;                                      GlobeNewswire\n81               &lt;NA&gt;                                      GlobeNewswire\n82               &lt;NA&gt;                                            FDA.gov\n83               &lt;NA&gt;                                           Exclaim!\n84     financial-post                                     Financial Post\n85               &lt;NA&gt;                                          [Removed]\n86        abc-news-au                                      ABC News (AU)\n87               &lt;NA&gt;                                      GlobeNewswire\n88               &lt;NA&gt;                                      GlobeNewswire\n89               &lt;NA&gt;                                      GlobeNewswire\n90               &lt;NA&gt;                                      GlobeNewswire\n91               &lt;NA&gt;                                      GlobeNewswire\n92               &lt;NA&gt;                                      GlobeNewswire\n93               &lt;NA&gt;                                      GlobeNewswire\n94               &lt;NA&gt;                                      GlobeNewswire\n95               &lt;NA&gt;                                      Investing.com\n96               &lt;NA&gt;                                      GlobeNewswire\n97               &lt;NA&gt;                                      Investing.com\n98               &lt;NA&gt;                                   Thehillstimes.in\n99               &lt;NA&gt;                                      GlobeNewswire\n100              &lt;NA&gt;                                      Investing.com\n\n\n\n\n\n\n#Creating API query function\nnews_query &lt;- function(topic = \"NDAs\", time = \"2024-09-17\", api_key = \"bed510d4bd934eb19f33549204a85dba\" ){\n  \n  #Creating URl to use for GET()\n  url_base &lt;- \"https://newsapi.org/v2/everything?\"\n  url &lt;- paste0(url_base, \"q=\", topic, \"&from=\", time, \"&apiKey=\", api_key)\n  data &lt;- GET(url)\n  \n  #Parsing the data and using pluck()\n  data &lt;- data$content |&gt;\n    rawToChar() |&gt; \n    fromJSON() |&gt;\n    pluck(\"articles\")\n  \n  return(data)\n  \n}\n\n#Creating object of NDAs as topic\nNDA_data &lt;- news_query()\n\n#creating object with non-competes as topic and date as being from october 2nd 2024\ncompete_data &lt;- news_query(topic = \"non-competes\", time = \"2024-10-02\")\n\n\n\n\n\n#Creating object of just the source variable and making name into a factor\nNDA_df &lt;- NDA_data$source |&gt;\n  mutate(name = as.factor(name))\n\n#Creating one-way contingency table for name\ntable(\"Name of source summary\" = NDA_df$name)\n\nName of source summary\n                                             /FILM \n                                                 1 \n                                         [Removed] \n                                                 3 \n                                          ABC News \n                                                 3 \n                                     ABC News (AU) \n                                                 2 \n                               Americanthinker.com \n                                                 1 \n                                      AppleInsider \n                                                 1 \n                                          BBC News \n                                                 1 \n                                   Bleacher Report \n                                                 1 \n                                    Boredpanda.com \n                                                 1 \n                                     Boston Herald \n                                                 1 \n                                          BroBible \n                                                 1 \n                                  Business Insider \n                                                 1 \n                                          CBC News \n                                                 2 \n                                        CBS Sports \n                                                 2 \n                                       CinemaBlend \n                                                 1 \n                                     ComicBook.com \n                                                 1 \n                                      ComputerBase \n                                                 1 \n                                Crooksandliars.com \n                                                 1 \n                                       CryptoSlate \n                                                 1 \n                                       Daily Beast \n                                                 1 \n                                  Dianeravitch.net \n                                                 1 \n                                         Dnyuz.com \n                                                 1 \n                                              ESPN \n                                                 1 \n                                          Exclaim! \n                                                 1 \n                                          Fark.com \n                                                 1 \n                                           FDA.gov \n                                                 1 \n                                    Financial Post \n                                                 2 \n                                            Forbes \n                                                 6 \n                                           Fortune \n                                                 1 \n                                          GameSpot \n                                                 1 \n                                        GeekTyrant \n                                                 1 \n                                       Gizmodo.com \n                                                 1 \n                                     GlobeNewswire \n                                                22 \nHarvard School of Engineering and Applied Sciences \n                                                 1 \n                                    Independent.ie \n                                                 1 \n                                     Investing.com \n                                                 3 \n                                  iPhone in Canada \n                                                 1 \n                                     Longreads.com \n                                                 1 \n                                          Mediaite \n                                                 1 \n                                        Music Ally \n                                                 2 \n                               Nakedcapitalism.com \n                                                 1 \n                                 New York Magazine \n                                                 1 \n                                           newsBTC \n                                                 1 \n                                            Newser \n                                                 1 \n                                          Newsweek \n                                                 1 \n                                          Page Six \n                                                 1 \n                                        Pajiba.com \n                                                 1 \n                                     Rolling Stone \n                                                 2 \n                                       Screen Rant \n                                                 1 \n                                           Sky.com \n                                                 2 \n                                         Stereogum \n                                                 2 \n                                    Techrights.org \n                                                 1 \n                                     The Daily Dot \n                                                 1 \n                                      The Diplomat \n                                                 1 \n                                        The Hustle \n                                                 1 \n                                   The Irish Times \n                                                 1 \n                                  Thehillstimes.in \n                                                 1 \n                                           TheWrap \n                                                 1 \n                                 Tom's Hardware UK \n                                                 1 \n                                         TweakTown \n                                                 1 \n\n\n\n\n\n\n#Creating a date column for NDA_Data with separate_wider_delim\ndate_function &lt;- function(data){ \n  wide_data &lt;- separate_wider_delim(data, \n                                    cols = c(\"publishedAt\"), \n                                    delim = \"T\", \n                                    names = c(\"date\", \"time\"), \n                                    too_few = \"debug\", \n                                    names_repair = \"unique\", \n                                    too_many = \"drop\") \n  \n  #selecting the date column then using ymd\n  wide_data &lt;- wide_data |&gt;\n    select(date) |&gt;\n    mutate(published_at = ymd(date)) \n  \n  #adding column to data frame\n  data &lt;- cbind(data, wide_data)\n  \n  return(data)\n}\n\n#Running the function\nNDA_dates &lt;- date_function(NDA_data)\ncompete_dates &lt;- date_function(compete_data)\n\n#removing publishedAT\nNDA_dates &lt;- NDA_dates |&gt;\n  select(-publishedAt, -date)\ncompete_dates &lt;- compete_dates |&gt;\n  select(-publishedAt, -date)\n\n#sorting date frames by new parsed date and creating new variable\nNDA_dates &lt;- NDA_dates|&gt;\n  arrange(published_at)\ncompete_dates &lt;- compete_dates |&gt;\n  arrange(published_at)\n\n#creating new data frames to include pub_diff\ndiff_NDA &lt;- NDA_dates |&gt;\n  mutate(pub_diff = published_at - lag(published_at))\ndiff_NDA &lt;- diff_NDA |&gt;\n  mutate(pub_diff = as.numeric(pub_diff))\ndiff_compete &lt;- compete_dates |&gt;\n  mutate(pub_diff = published_at - lag(published_at))\ndiff_compete &lt;- diff_compete |&gt;\n  mutate(pub_diff = as.numeric(pub_diff))\n\n\n\n\n\n#subsetting the data\ndiff_NDA &lt;- diff_NDA |&gt;\n  select(published_at, pub_diff)\ndiff_compete &lt;- diff_compete |&gt;\n  select(published_at, pub_diff)\n\n#creating function to use map() to get summary stats\nmap_function &lt;- function(x, col = \"published_at\"){\n  funs &lt;- list(mean = mean, median = median, sd = sd) \n  map(funs, function(f) f(x[[col]], na.rm = TRUE))\n}\n#running function for each column\nmap_function(diff_NDA)\n\n$mean\n[1] \"2024-09-30\"\n\n$median\n[1] \"2024-10-01\"\n\n$sd\n[1] 8.820568\n\nmap_function(diff_NDA, col = \"diff_pub\")\n\n$mean\n[1] NA\n\n$median\nNULL\n\n$sd\n[1] NA\n\nmap_function(diff_NDA)\n\n$mean\n[1] \"2024-09-30\"\n\n$median\n[1] \"2024-10-01\"\n\n$sd\n[1] 8.820568\n\nmap_function(diff_NDA, col = \"diff_pub\")\n\n$mean\n[1] NA\n\n$median\nNULL\n\n$sd\n[1] NA"
  }
]